name: Deploy Microcoffee to Google Kubernetes Engine
on:
  workflow_dispatch:

env:
  GKE_PROJECT: microcoffeeoncloud
  GKE_CLUSTER: microcoffeeoncloud-cluster
  GKE_ZONE: europe-west1-b

jobs:
  deploy:
    name: Deploy to GKE cluster
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # https://github.com/marketplace/actions/set-up-gcloud-cloud-sdk-environment
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GKE_SRVGHA_KEY }}
          project_id: ${{ env.GKE_PROJECT }}

      # Register Docker to use the gcloud CLI as a credential helper for authentication.
      - name: Register gcloud as a Docker credential helper
        run: |-
          gcloud --quiet auth configure-docker

      # https://github.com/marketplace/actions/get-gke-credentials
      - name: Get the GKE credentials so we can deploy to the cluster
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SRVGHA_KEY }}

      - name: Deploy and wait for Keycloak authorization server to start
        run: |-
          kubectl apply -f microcoffeeoncloud-authserver/k8s-service-gke.yml
          kubectl wait --for=condition=Ready pod -l app=authserver --timeout=300s

      - name: Configure Keycloak authorization server
        run: |-
          # Get EXTERNAL_IP of one of the cluster nodes
          EXTERNAL_IP=$(gcloud compute instances list --project $GKE_PROJECT --format json | jq -r ".[0].networkInterfaces[0].accessConfigs[0].natIP")
          echo "EXTERNAL_IP=$EXTERNAL_IP"

          # Get an admin token
          ADMINTOKEN=$(curl -s -k -d "client_id=admin-cli" -d "username=admin" -d "password=admin" -d "grant_type=password" https://$EXTERNAL_IP:30456/auth/realms/master/protocol/openid-connect/token | jq -r ".access_token")
          echo "ADMINTOKEN=$ADMINTOKEN"

          # Get id of order-service client
          ID=$(curl -s -k -H "Authorization: Bearer $ADMINTOKEN" https://$EXTERNAL_IP:30456/auth/admin/realms/microcoffee/clients | jq -r ".[] | select(.clientId == \"order-service\") | .id")
          echo "ID=$ID"

          # Generate new secret of order-service client
          curl -i -k -X POST -H "Authorization: Bearer $ADMINTOKEN" https://$EXTERNAL_IP:30456/auth/admin/realms/microcoffee/clients/$ID/client-secret

          # Get generated client secret
          CLIENT_SECRET=$(curl -s -k -H "Authorization: Bearer $ADMINTOKEN" https://$EXTERNAL_IP:30456/auth/admin/realms/microcoffee/clients/$ID/client-secret | jq -r ".value")
          echo "CLIENT_SECRET=$CLIENT_SECRET"

          # Create Kubernetes secret where the new secret of order-service client is stored
          kubectl create secret generic order-client-secret --from-literal=client-secret=$CLIENT_SECRET
